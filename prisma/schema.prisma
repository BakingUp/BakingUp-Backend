datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator db {
  provider = "go run github.com/steebchen/prisma-client-go"
}

model Users{
  user_id                String    @id @unique
  first_name             String
  last_name              String
  telephone              String
  store_name             String
  black_expiration_date  DateTime
  red_expiration_date    DateTime
  yellow_expiration_date DateTime
  language               Language
  notifications          Notifications[]
  orders                 Orders[]
  ingredients            Ingredients[]
  devices                Devices[]
  recipes                Recipes[]
  fixCosts               FixCost[]
  production_queue   Production_queue[]
}

model FixCost {
  fix_cost_id     String   @id @unique @default(uuid())
  user            Users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id         String
  created_at      DateTime
  rent            Float?
  salaries        Float?
  insurance       Float?
  subscriptions   Float?
  advertising     Float?
  electricity     Float?
  water           Float?
  gas             Float?
  other           Float?
  note            String?
}

model Notifications {
  noti_id      String   @id @unique
  user         Users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id      String
  eng_title    String
  thai_title   String
  eng_message  String
  thai_message String
  created_at   DateTime
  is_read      Boolean
  noti_type    NotificationType
  item_id      String
  item_name    String
  noti_item_type NotificationInfoType
}

enum Language {
  EN
  TH
}

enum NotificationType {
  INFO
  WARNING
  ALERT
}

enum NotificationInfoType {
  INGREDIENT
  STOCK
  ORDER
}

model Orders {
  order_id            String       @id @unique @default(uuid())
  user                Users        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id            String
  order_taken_by     String       @default("-")
  customer_name      String?      @default("-")
  customer_phone_num  String?     @default("-")
  order_platform     OrderPlatform
  order_date         DateTime
  order_type         OrderType
  is_pre_order       Boolean
  order_status       OrderStatus
  pick_up_date_time  DateTime     @default(now())
  pick_up_method     PickUpMethod?
  order_index        Int
  order_products     Order_products[]
  order_note_text    String?     @default("-")
  order_note_create_at DateTime? @default(now())
  production_queue   Production_queue[]
  cutting_stock      Cutting_stock[]
}


enum OrderPlatform {
  STORE
  LINEMAN
  GRAB
  FACEBOOK
  WEBSITE
  OTHER
}

enum OrderType {
  BULK_ORDER
  PERSONAL
  SPECIAL_DAY
  FESTIVAL
  OTHER
}

enum OrderStatus {
  DONE
  IN_PROCESS
  CANCEL
}

enum PickUpMethod {
  IN_STORE
  DELIVERY
  OTHER
}

model Order_products {
  order_id          String
  recipe_id         String
  product_quantity  Int
  order             Orders    @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  recipe            Recipes   @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)

  @@id([order_id, recipe_id])
}

model Production_queue{
  production_id       String   @id @unique @default(uuid())
  user                Users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id             String
  recipe_id           String
  recipe              Recipes  @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)
  order_id            String
  order               Orders   @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  production_quantity Int
}

model Ingredients {
  ingredient_id        String       @id @unique
  user                 Users        @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id              String
  ingredient_eng_name String
  ingredient_thai_name String
  unit                 Unit
  ingredient_less_than Float
  day_before_expire    DateTime
  ingredient_images    Ingredient_images[]
  ingredient_detail    Ingredient_detail[]
  recipe_ingredients   Recipe_ingredients[]
}

model Ingredient_detail {
  ingredient_stock_id  String        @id @unique
  ingredient           Ingredients   @relation(fields: [ingredient_id], references: [ingredient_id], onDelete: Cascade)
  ingredient_id        String
  ingredient_stock_url String?
  price                Float
  ingredient_quantity  Float
  expiration_date      DateTime
  ingredient_supplier  String
  ingredient_brand     String
  ingredient_notes     Ingredient_notes[]
}

model Ingredient_images {
  ingredient_image_index String
  ingredient_id          String
  ingredient             Ingredients       @relation(fields: [ingredient_id], references: [ingredient_id], onDelete: Cascade)
  ingredient_url         String
 
  @@id([ingredient_id, ingredient_image_index])
}

model Ingredient_notes {
  ingredient_note_id  String             @id @unique
  ingredient_detail   Ingredient_detail  @relation(fields: [ingredient_stock_id], references: [ingredient_stock_id], onDelete: Cascade)
  ingredient_stock_id String
  note_created_at     DateTime
  ingredient_note     String
}

enum Unit {
  G
  KG
  L
  ML
}

model Devices {
  deviceToken String  @id @unique
  user        Users   @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id     String
}

model Recipes {
  recipe_id                     String                     @id @unique
  user                          Users                      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  user_id                       String
  recipe_eng_name               String
  recipe_thai_name              String
  total_time                    DateTime
  serving                       Int
  eng_instruction               String
  thai_instruction              String
  scale_servings                Int @default(-1)
  hidden_cost                   Float   @default(10)
  labor_cost                    Float  @default(150)
  profit_margin                 Float @default(30)
  recipe_images                 Recipe_images[]
  recipe_ingredients            Recipe_ingredients[]
  recipe_instruction_images     Recipe_instruction_images[]
  stocks                        Stocks?
  order_products                Order_products[]
  production_queue   Production_queue[]
}

model Recipe_images {
  recipe                   Recipes   @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)
  recipe_id                String
  image_index              Int
  recipe_url               String

  @@id([recipe_id, image_index])
}

model Recipe_ingredients {
  recipe                   Recipes     @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)
  recipe_id                String
  ingredient_id            String
  ingredient               Ingredients @relation(fields: [ingredient_id], references: [ingredient_id], onDelete: Cascade)
  recipe_ingredient_quantity Float

  @@id([recipe_id, ingredient_id])
}

model Recipe_instruction_images {
  recipe                   Recipes     @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)
  recipe_id                String
  instruction_image_index  Int
  instruction_url          String

  @@id([recipe_id, instruction_image_index])
}

model Stocks {
  recipe                   Recipes    @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)
  recipe_id                String     @id
  lst                      Int
  selling_price            Float
  cost                     Float
  stock_less_than          Int
  day_before_expired       DateTime
  stock_detail             Stock_detail[]
}

model Stock_detail {
  stock_detail_id          String     @id @unique
  stock                    Stocks     @relation(fields: [recipe_id], references: [recipe_id], onDelete: Cascade)
  recipe_id                String
  created_at               DateTime
  sell_by_date             DateTime
  quantity                 Int
  note                     String?
  cutting_stock            Cutting_stock[]
}

model Cutting_stock {
  stock_detail_id          String
  stock_detail             Stock_detail @relation(fields: [stock_detail_id], references: [stock_detail_id], onDelete: Cascade)
  order_id                 String
  order                    Orders      @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  quantity                 Int
  cutting_time             DateTime

  @@id([stock_detail_id, order_id])
}
